<?php

/**
 * Action Comentarios 
 * 
 * A class generated by Frapi
 * 
 * @link http://getfrapi.com
 * @author Frapi <frapi@getfrapi.com>
 * @link /comentarios
 */
class Action_Comentarios extends Frapi_Action implements Frapi_Action_Interface {

    /**
     * Required parameters
     * 
     * @var An array of required parameters.
     */
    protected $requiredParams = array('id', 'tipo');

    /**
     * The data container to use in toArray()
     * 
     * @var A container of data to fill and return in toArray()
     */
    private $data = array();

    /**
     * To Array
     * 
     * This method returns the value found in the database 
     * into an associative array.
     * 
     * @return array
     */
    public function toArray() {
        return $this->data;
    }

    /**
     * Default Call Method
     * 
     * This method is called when no specific request handler has been found
     * 
     * @return array
     */
    public function executeAction() {
        $valid = $this->hasRequiredParameters($this->requiredParams);
        if ($valid instanceof Frapi_Error) {
            throw $valid;
        }

        return $this->toArray();
    }

    /**
     * Get Request Handler
     * 
     * This method is called when a request is a GET
     * 
     * @return array
     */
    public function getNombreUsuario($usuario_id) {

        $sql = "SELECT nombres, apellidos FROM USUARIO where codigo=" . $usuario_id;

        $db = Frapi_Database::getGLOBAL_ID();
        $stmt = $db->prepare($sql);
        $stmt->execute();
        $result = $stmt->fetch();
        $usuario = $result['nombres'] . " " . $result['apellidos'];

        $db = null;
        return $usuario;
    }

    public function executeGet() {


        $id = $this->getParam('id', self::TYPE_INT);
        $tipo = $this->getParam('tipo', self::TYPE_INT);
        $limite = $this->getParam('limite', self::TYPE_INT);


        if (isset($tipo)) {
            $sql = "SELECT USUARIO_ID, PUNTEO, COMENTARIO, FECHA_COMENTARIO FROM REVIEW
                WHERE TIPO=" . $tipo;

            if (isset($id)) {
                $sql.=" AND PROMOCION_ACTIVIDAD_ID=" . $id;
            }

            if (isset($limite)) {
                $sql.=" LIMIT " . $limite;
            }

            $db = Frapi_Database::getInstance("default");
            $stmt = $db->prepare($sql);
            $stmt->execute();
            
            $arreglo = array();
            if ($stmt->rowCount() > 0) {
                $result = $stmt->fetchAll();
                
                foreach ($result as $data) {
                    $arreglo[] = array(
                    'USUARIO' => $this->getNombreUsuario($data['USUARIO_ID']),
                    'PUNTEO' => (int)$data['PUNTEO'],
                    'COMENTARIO' => $data['COMENTARIO'],
                    'FECHA_COMENTARIO' => $data['FECHA_COMENTARIO']
                    );
                }
                
                $this->data[] = array('COMENTARIOS' => $arreglo);
            } else {
                throw new Frapi_Error('SIN_RESULTADOS');
            }
            $db = null;
        } else {
            throw new Frapi_Error('FALTAN_PARAMETROS');
        }


        return $this->toArray();
    }

    /**
     * Post Request Handler
     * 
     * This method is called when a request is a POST
     * 
     * @return array
     */
    public function executePost() {
        $valid = $this->hasRequiredParameters($this->requiredParams);
        if ($valid instanceof Frapi_Error) {
            throw $valid;
        }

        return $this->toArray();
    }

    /**
     * Put Request Handler
     * 
     * This method is called when a request is a PUT
     * 
     * @return array
     */
    public function executePut() {
        $valid = $this->hasRequiredParameters($this->requiredParams);
        if ($valid instanceof Frapi_Error) {
            throw $valid;
        }

        return $this->toArray();
    }

    /**
     * Delete Request Handler
     * 
     * This method is called when a request is a DELETE
     * 
     * @return array
     */
    public function executeDelete() {
        $valid = $this->hasRequiredParameters($this->requiredParams);
        if ($valid instanceof Frapi_Error) {
            throw $valid;
        }

        return $this->toArray();
    }

    /**
     * Head Request Handler
     * 
     * This method is called when a request is a HEAD
     * 
     * @return array
     */
    public function executeHead() {
        $valid = $this->hasRequiredParameters($this->requiredParams);
        if ($valid instanceof Frapi_Error) {
            throw $valid;
        }

        return $this->toArray();
    }

}
